#!/usr/bin/env bash

set -e

declare LOCK_FILE="/tmp/asdf-nodejs-postinstall.lock.2ac8ccc4"
declare last_called_file="/tmp/asdf-nodejs-postinstall.last_called.dd05fa02"
declare -i throttle_by=10

main() {
    local -i call_time

    # Write the call time to the last_called_file.
    # We set the call_time inside the lock block so the time written to the last_called_file will always increase.
    {
        flock -x 200
        call_time=$(date +%s)
        >"$last_called_file" printf -- "%d\n" $call_time
    } 200>"$LOCK_FILE"

    # Wait some amount of time.
    sleep $throttle_by


    local -i last_called

    # Read the value from last_called_file.
    {
        flock -s 200
        touch -- "$last_called_file"
        last_called=$(<"$last_called_file")
    } 200>"$LOCK_FILE"

    # If (($call_time != $last_called)) we assume that some other thread will call the reshim.
    # If main() won't be called for $throttle_by seconds than the value inside $last_called_file won't change.
    # So, assuming that the main will be called finitely many times, those two values will be equal for the most recent thread
    # and the last reshim will occur approximately $throttle_by seconds after the last call to main().
    if (($call_time == $last_called)); then
        # This cleanup has to happen before the reshim because main() might be called after the reshim and before the removal of the $last_called_file.
        {
            flock -x 200
            rm -f -- "$last_called_file"
        } 200>"$LOCK_FILE"

        echo ASDF RESHIM
        asdf reshim nodejs "$ASDF_INSTALL_VERSION"
    fi
}


# Spawn main in background so it won't block the npm thread.
main &
